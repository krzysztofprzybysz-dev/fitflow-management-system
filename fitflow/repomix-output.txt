This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-06-17T11:54:28.491Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
pom.xml
src/main/java/s24825/controller/ClassScheduleController.java
src/main/java/s24825/controller/LoginController.java
src/main/java/s24825/controller/MyReservationsController.java
src/main/java/s24825/FitflowApplication.java
src/main/java/s24825/model/classes/FitnessClass.java
src/main/java/s24825/model/classes/GroupClass.java
src/main/java/s24825/model/membership/Membership.java
src/main/java/s24825/model/membership/StandardMembership.java
src/main/java/s24825/model/other/TrainingRoom.java
src/main/java/s24825/model/person/Member.java
src/main/java/s24825/model/person/Person.java
src/main/java/s24825/model/person/Trainer.java
src/main/java/s24825/model/reservation/Reservation.java
src/main/java/s24825/model/reservation/ReservationStatus.java
src/main/java/s24825/repository/FitnessClassRepository.java
src/main/java/s24825/repository/MemberRepository.java
src/main/java/s24825/repository/MembershipRepository.java
src/main/java/s24825/repository/ReservationRepository.java
src/main/java/s24825/repository/TrainerRepository.java
src/main/java/s24825/repository/TrainingRoomRepository.java
src/main/java/s24825/service/DataInitializerService.java
src/main/java/s24825/service/ReservationService.java
src/main/resources/application.properties
src/main/resources/templates/class-schedule.html
src/main/resources/templates/fragments.html
src/main/resources/templates/login.html
src/main/resources/templates/my-reservations.html
src/test/java/pl/maksp/fitflow/model/MembershipTests.java

================================================================
Repository Files
================================================================

================
File: .gitignore
================
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### IntelliJ IDEA ###
.idea/modules.xml
.idea/jarRepositories.xml
.idea/compiler.xml
.idea/libraries/
*.iws
*.iml
*.ipr

### Eclipse ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

### Mac OS ###
.DS_Store

================
File: pom.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.4.1</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>s24825</groupId>
    <artifactId>fitflow</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <org.mapstruct.version>1.6.0</org.mapstruct.version>
        <org.projectlombok.version>1.18.30</org.projectlombok.version>
        <lombok-mapstruct-binding.version>0.2.0</lombok-mapstruct-binding.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- Spring Boot Starter for building web, including RESTful, applications using Spring MVC -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Spring Boot Starter for using Spring Data JPA with Hibernate -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Spring Boot Starter for using Thymeleaf views -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>

        <!-- H2 Database Engine -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${org.mapstruct.version}</version>
        </dependency>

        <!-- Project Lombok to reduce boilerplate code -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${org.projectlombok.version}</version>
        </dependency>

        <!-- Spring Boot Starter for testing -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Spring Boot Starter for validation -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${org.mapstruct.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                            <version>${org.projectlombok.version}</version>
                        </path>
                        <path>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok-mapstruct-binding</artifactId>
                            <version>${lombok-mapstruct-binding.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <includes>
                        <include>**/*Test.java</include>
                    </includes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>

================
File: src/main/java/s24825/controller/ClassScheduleController.java
================
package s24825.controller;

import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import s24825.model.classes.FitnessClass;
import s24825.repository.FitnessClassRepository;
import s24825.service.ReservationService;

import java.util.List;

/**
 * Controller for handling requests related to the class schedule and making reservations.
 */
@Controller
public class ClassScheduleController {

    private final FitnessClassRepository fitnessClassRepository;
    private final ReservationService reservationService;

    public ClassScheduleController(FitnessClassRepository fitnessClassRepository, ReservationService reservationService) {
        this.fitnessClassRepository = fitnessClassRepository;
        this.reservationService = reservationService;
    }


    @GetMapping({"/", "/class-schedule"})
    public String showClassSchedule(Model model, HttpSession session) {

        Long memberId = (Long) session.getAttribute("loggedInMemberId");

        if (memberId == null) {
            return "redirect:/login";
        }

        List<FitnessClass> classes = fitnessClassRepository.findAll();

        model.addAttribute("classes", classes);

        return "class-schedule";
    }

    @PostMapping("/reservations")
    public String makeReservation(@RequestParam("classId") Long classId,
                                  HttpSession session,
                                  RedirectAttributes redirectAttributes) {

        Long memberId = (Long) session.getAttribute("loggedInMemberId");

        if (memberId == null) {
            return "redirect:/login";
        }

        try {
            reservationService.createReservation(memberId, classId);
            redirectAttributes.addFlashAttribute("successMessage", "Rezerwacja zakończona pomyślnie!");
        } catch (IllegalStateException e) {
            redirectAttributes.addFlashAttribute("errorMessage", "Błąd rezerwacji: " + e.getMessage());
        }
        return "redirect:/class-schedule";
    }

}

================
File: src/main/java/s24825/controller/LoginController.java
================
package s24825.controller;


import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import s24825.model.person.Member;
import s24825.repository.MemberRepository;

import java.util.Optional;

@Controller
public class LoginController {

    private final MemberRepository memberRepository;

    public LoginController(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }

    @GetMapping("/login")
    public String showLoginPage() {
        return "login";
    }

    @GetMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate();
        return "redirect:/login";
    }

    @PostMapping("/login")
    public String processLogin(@RequestParam String email,
                               @RequestParam String password,
                               HttpSession session,
                               RedirectAttributes redirectAttributes) {

        Optional<Member> memberOptional = memberRepository.findByEmail(email);

        if (memberOptional.isPresent()) {
            Member member = memberOptional.get();

            if (password.equals(member.getPassword())) {
                session.setAttribute("loggedInMemberId", member.getId());
                session.setAttribute("loggedInMemberFirstName", member.getFirstName());
                return "redirect:/class-schedule";
            }

        }
        redirectAttributes.addFlashAttribute("error", "Nieprawidłowy e-mail lub hasło.");
        return "redirect:/login";
    }


}

================
File: src/main/java/s24825/controller/MyReservationsController.java
================
package s24825.controller;

import jakarta.servlet.http.HttpSession;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import s24825.model.person.Member;
import s24825.model.reservation.Reservation;
import s24825.repository.MemberRepository;

import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;


@Controller
public class MyReservationsController {

    private final MemberRepository memberRepository;

    public MyReservationsController(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }


    @GetMapping("/my-reservations")
    public String showMyReservations(Model model, HttpSession session) {

        Long memberId = (Long) session.getAttribute("loggedInMemberId");

        if (memberId == null) {
            return "redirect:/login";
        }

        Member member = memberRepository.findByIdWithDetails(memberId)
                .orElseThrow(() -> new IllegalStateException("Zalogowany użytkownik nie został znaleziony w bazie danych."));

        List<Reservation> sortedReservations = member.getReservations().stream()
                .sorted(Comparator.comparing(r -> r.getFitnessClass().getDateTime()))
                .collect(Collectors.toList());

        model.addAttribute("reservations", sortedReservations);
        model.addAttribute("member", member);
        return "my-reservations";
    }
}

================
File: src/main/java/s24825/FitflowApplication.java
================
package s24825;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;


@SpringBootApplication
public class FitflowApplication {

    public static void main(String[] args) {
        SpringApplication.run(FitflowApplication.class, args);
    }

}

================
File: src/main/java/s24825/model/classes/FitnessClass.java
================
package s24825.model.classes;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import s24825.model.reservation.Reservation;
import s24825.model.reservation.ReservationStatus;
import s24825.model.other.TrainingRoom;
import s24825.model.person.Trainer;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;


@Entity
@Table(name = "fitness_classes")
@Inheritance(strategy = InheritanceType.JOINED)
@Getter
@Setter
@NoArgsConstructor
@NamedEntityGraph(
        name = "FitnessClass.withDetails",
        attributeNodes = {
                @NamedAttributeNode("reservations"),
                @NamedAttributeNode("trainer"),
                @NamedAttributeNode("trainingRoom")
        }
)
public abstract class FitnessClass {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String description;
    private LocalDateTime dateTime;
    private int durationInMinutes;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "trainer_id")
    private Trainer trainer;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "training_room_id")
    private TrainingRoom trainingRoom;

    @OneToMany(mappedBy = "fitnessClass", fetch = FetchType.LAZY)
    private Set<Reservation> reservations = new HashSet<>();

    public abstract int getCapacity();

    public int getNumberOfReservations() {
        return (int) reservations.stream()
                .filter(r -> r.getStatus() == ReservationStatus.CONFIRMED)
                .count();
    }
}

================
File: src/main/java/s24825/model/classes/GroupClass.java
================
package s24825.model.classes;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Represents a group fitness class, a specific type of FitnessClass.
 */
@Entity
@Table(name = "group_classes")
@Getter
@Setter
@NoArgsConstructor
public class GroupClass extends FitnessClass {

    private int participantLimit;

    @Override
    public int getCapacity() {
        return getParticipantLimit();
    }
}

================
File: src/main/java/s24825/model/membership/Membership.java
================
package s24825.model.membership;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Inheritance;
import jakarta.persistence.InheritanceType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import s24825.model.person.Member;

import java.time.LocalDate;

/**
 * Abstract base class for member passes.
 * Implements JOINED inheritance strategy.
 */
@Entity
@Table(name = "memberships")
@Inheritance(strategy = InheritanceType.JOINED)
@Getter
@Setter
@NoArgsConstructor
public abstract class Membership {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private LocalDate purchaseDate;
    private LocalDate expirationDate;
    private boolean active;

    @ManyToOne
    @JoinColumn(name = "member_id", nullable = false)
    private Member member;

    public abstract boolean canBook();
}

================
File: src/main/java/s24825/model/membership/StandardMembership.java
================
package s24825.model.membership;

import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDate;

@Entity
@Table(name = "standard_memberships")
@Getter
@Setter
@NoArgsConstructor
public class StandardMembership extends Membership {

    private int entryLimit;
    private int entriesUsed;

    @Override
    public boolean canBook() {
        return isActive() &&
                getExpirationDate().isAfter(LocalDate.now()) &&
                entriesUsed < entryLimit;
    }
}

================
File: src/main/java/s24825/model/other/TrainingRoom.java
================
package s24825.model.other;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;


@Entity
@Table(name = "training_rooms")
@Getter
@Setter
@NoArgsConstructor
public class TrainingRoom {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String number;

    private String name;
    private int capacity;
}

================
File: src/main/java/s24825/model/person/Member.java
================
package s24825.model.person;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import s24825.model.membership.Membership;
import s24825.model.reservation.Reservation;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Entity
@Table(name = "members")
@Getter
@Setter
@NoArgsConstructor
public class Member extends Person {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String memberNumber;

    private LocalDate registrationDate;
    private boolean active;

    @OneToMany(mappedBy = "member", fetch = FetchType.LAZY)
    private Set<Membership> memberships = new HashSet<>();


    @OneToMany(mappedBy = "member", fetch = FetchType.LAZY)
    private Set<Reservation> reservations = new HashSet<>();

    public void addPass(Membership membership) {
        memberships.add(membership);
        membership.setMember(this);
    }
}

================
File: src/main/java/s24825/model/person/Person.java
================
package s24825.model.person;

import jakarta.persistence.MappedSuperclass;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.time.LocalDate;

@MappedSuperclass
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor

public abstract class Person {

    private String firstName;
    private String lastName;
    private LocalDate dateOfBirth;
    private String phone;

    private String email;
    private String password;


}

================
File: src/main/java/s24825/model/person/Trainer.java
================
package s24825.model.person;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Represents a trainer at the fitness club.
 */
@Entity
@Table(name = "trainers")
@Getter
@Setter
@NoArgsConstructor
public class Trainer extends Person {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String licenseNumber;
}

================
File: src/main/java/s24825/model/reservation/Reservation.java
================
package s24825.model.reservation;

import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import s24825.model.classes.FitnessClass;
import s24825.model.person.Member;

import java.time.LocalDateTime;

@Entity
@Table(name = "reservations")
@Getter
@Setter
@NoArgsConstructor
public class Reservation {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private LocalDateTime reservationDate;

    @Enumerated(EnumType.STRING)
    private ReservationStatus status;

    @ManyToOne
    @JoinColumn(name = "member_id", nullable = false)
    private Member member;

    @ManyToOne
    @JoinColumn(name = "fitness_class_id", nullable = false)
    private FitnessClass fitnessClass;

    public Reservation(Member member, FitnessClass fitnessClass) {
        this.member = member;
        this.fitnessClass = fitnessClass;
        this.reservationDate = LocalDateTime.now();
        this.status = ReservationStatus.CONFIRMED;
    }
}

================
File: src/main/java/s24825/model/reservation/ReservationStatus.java
================
package s24825.model.reservation;

public enum ReservationStatus {
    CONFIRMED,
    CANCELLED,
    WAITING_LIST
}

================
File: src/main/java/s24825/repository/FitnessClassRepository.java
================
package s24825.repository;

import org.springframework.data.jpa.repository.EntityGraph;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import s24825.model.classes.FitnessClass;

import java.util.List;

@Repository
public interface FitnessClassRepository extends JpaRepository<FitnessClass, Long> {

    @Override
    @EntityGraph(value = "FitnessClass.withDetails")
    List<FitnessClass> findAll();

}

================
File: src/main/java/s24825/repository/MemberRepository.java
================
package s24825.repository;


import org.springframework.data.jpa.repository.EntityGraph;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;
import s24825.model.person.Member;

import java.util.Optional;

@Repository
public interface MemberRepository extends JpaRepository<Member, Long> {

    Optional<Member> findById(Long id);

    @Query("SELECT DISTINCT m FROM Member m " +
            "LEFT JOIN FETCH m.memberships " +
            "LEFT JOIN FETCH m.reservations r " +
            "LEFT JOIN FETCH r.fitnessClass fc " +
            "LEFT JOIN FETCH fc.trainer " +
            "LEFT JOIN FETCH fc.trainingRoom " +
            "WHERE m.id = :id")
    Optional<Member> findByIdWithDetails(@Param("id") Long id);

    @Query("SELECT DISTINCT m FROM Member m LEFT JOIN FETCH m.memberships LEFT JOIN FETCH m.reservations WHERE m.id = :id")
    Optional<Member> findByIdWithMembershipsAndReservations(@Param("id") Long id);

    Optional<Member> findByEmail(String email);
}

================
File: src/main/java/s24825/repository/MembershipRepository.java
================
package s24825.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import s24825.model.membership.Membership;

@Repository
public interface MembershipRepository extends JpaRepository<Membership, Long> {
}

================
File: src/main/java/s24825/repository/ReservationRepository.java
================
package s24825.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import s24825.model.reservation.Reservation;

@Repository
public interface ReservationRepository extends JpaRepository<Reservation, Long> {
}

================
File: src/main/java/s24825/repository/TrainerRepository.java
================
package s24825.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import s24825.model.person.Trainer;

@Repository
public interface TrainerRepository extends JpaRepository<Trainer, Long> {
}

================
File: src/main/java/s24825/repository/TrainingRoomRepository.java
================
package s24825.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import s24825.model.other.TrainingRoom;

@Repository
public interface TrainingRoomRepository extends JpaRepository<TrainingRoom, Long> {
}

================
File: src/main/java/s24825/service/DataInitializerService.java
================
package s24825.service;

import jakarta.annotation.PostConstruct;
import org.springframework.stereotype.Service;
import s24825.model.classes.GroupClass;
import s24825.model.membership.StandardMembership;
import s24825.model.other.TrainingRoom;
import s24825.model.person.Member;
import s24825.model.person.Trainer;
import s24825.repository.FitnessClassRepository;
import s24825.repository.MemberRepository;
import s24825.repository.TrainerRepository;
import s24825.repository.TrainingRoomRepository;

import java.time.LocalDate;
import java.time.LocalDateTime;

/**
 * Service to initialize the database with sample data for demonstration purposes.
 */
@Service
public class DataInitializerService {

    private final MemberRepository memberRepository;
    private final TrainerRepository trainerRepository;
    private final TrainingRoomRepository trainingRoomRepository;
    private final FitnessClassRepository fitnessClassRepository;

    public DataInitializerService(MemberRepository memberRepository, TrainerRepository trainerRepository, TrainingRoomRepository trainingRoomRepository, FitnessClassRepository fitnessClassRepository) {
        this.memberRepository = memberRepository;
        this.trainerRepository = trainerRepository;
        this.trainingRoomRepository = trainingRoomRepository;
        this.fitnessClassRepository = fitnessClassRepository;
    }

    @PostConstruct
    public void initData() {
        // 1. Create Trainers
        Trainer trainer1 = new Trainer();
        trainer1.setFirstName("Anna");
        trainer1.setLastName("Nowak");
        trainer1.setLicenseNumber("T12345");
        trainerRepository.save(trainer1);

        Trainer trainer2 = new Trainer();
        trainer2.setFirstName("Piotr");
        trainer2.setLastName("Wiśniewski");
        trainer2.setLicenseNumber("T67890");
        trainerRepository.save(trainer2);

        // 2. Create Training Halls
        TrainingRoom salaA = new TrainingRoom();
        salaA.setName("Sala A");
        salaA.setNumber("A1");
        salaA.setCapacity(20);
        trainingRoomRepository.save(salaA);

        TrainingRoom hallB = new TrainingRoom();
        hallB.setName("Sala B");
        hallB.setNumber("B2");
        hallB.setCapacity(15);
        trainingRoomRepository.save(hallB);

        // 3. Create Fitness Classes
        GroupClass yogaClass = new GroupClass();
        yogaClass.setName("Poranna Joga");
        yogaClass.setDescription("Odświeżająca sesja jogi na dobry początek dnia.");
        yogaClass.setDateTime(LocalDateTime.now().plusDays(1).withHour(8).withMinute(0));
        yogaClass.setDurationInMinutes(60);
        yogaClass.setTrainer(trainer1);
        yogaClass.setTrainingRoom(salaA);
        yogaClass.setParticipantLimit(20);
        fitnessClassRepository.save(yogaClass);

        GroupClass crossfitClass = new GroupClass();
        crossfitClass.setName("Crossfit");
        crossfitClass.setDescription("Intensywny trening funkcjonalny.");
        crossfitClass.setDateTime(LocalDateTime.now().plusDays(1).withHour(18).withMinute(0));
        crossfitClass.setDurationInMinutes(50);
        crossfitClass.setTrainer(trainer2);
        crossfitClass.setTrainingRoom(hallB);
        crossfitClass.setParticipantLimit(15);
        fitnessClassRepository.save(crossfitClass);

        GroupClass fullClass = new GroupClass();
        fullClass.setName("Pilates (Pełna)");
        fullClass.setDescription("Wzmacniający pilates dla każdego.");
        fullClass.setDateTime(LocalDateTime.now().plusDays(2).withHour(17).withMinute(0));
        fullClass.setDurationInMinutes(55);
        fullClass.setTrainer(trainer1);
        fullClass.setTrainingRoom(salaA);
        fullClass.setParticipantLimit(0); // For testing "no seats" scenario
        fitnessClassRepository.save(fullClass);

        // 4. Create a Member with a Pass
        Member member = new Member();
        member.setFirstName("Jan");
        member.setLastName("Kowalski");
        member.setMemberNumber("M001");
        member.setActive(true);
        member.setEmail("jan.kowalski@example.com");
        member.setPassword("password123");
        member.setRegistrationDate(LocalDate.now().minusMonths(6));

        StandardMembership pass = new StandardMembership();
        pass.setPurchaseDate(LocalDate.now());
        pass.setExpirationDate(LocalDate.now().plusMonths(1));
        pass.setActive(true);
        pass.setEntryLimit(10);
        pass.setEntriesUsed(0);

        member.addPass(pass);
        memberRepository.save(member);
    }
}

================
File: src/main/java/s24825/service/ReservationService.java
================
package s24825.service;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import s24825.model.classes.FitnessClass;
import s24825.model.person.Member;
import s24825.model.membership.Membership;
import s24825.model.reservation.Reservation;
import s24825.repository.FitnessClassRepository;
import s24825.repository.MemberRepository;
import s24825.repository.ReservationRepository;

import java.util.Optional;

@Service
public class ReservationService {

    private final MemberRepository memberRepository;
    private final FitnessClassRepository fitnessClassRepository;
    private final ReservationRepository reservationRepository;

    public ReservationService(MemberRepository memberRepository,
                              FitnessClassRepository fitnessClassRepository,
                              ReservationRepository reservationRepository) {
        this.memberRepository = memberRepository;
        this.fitnessClassRepository = fitnessClassRepository;
        this.reservationRepository = reservationRepository;
    }


    @Transactional
    public void createReservation(Long memberId, Long fitnessClassId) {

        Member member = memberRepository.findByIdWithMembershipsAndReservations(memberId)
                .orElseThrow(() -> new IllegalStateException("Nie znaleziono członka o ID: " + memberId));

        FitnessClass fitnessClass = fitnessClassRepository.findById(fitnessClassId)
                .orElseThrow(() -> new IllegalStateException("Nie znaleziono zajęć o ID: " + fitnessClassId));

        if (fitnessClass.getNumberOfReservations() >= fitnessClass.getCapacity()) {
            throw new IllegalStateException("Brak wolnych miejsc na te zajęcia.");
        }


        Optional<Membership> activePass = member.getMemberships().stream()
                .filter(Membership::isActive)
                .findFirst();

        if (activePass.isEmpty() || !activePass.get().canBook()) {
            throw new IllegalStateException("Członek nie posiada aktywnego karnetu lub wyczerpał limit wejść.");
        }

        boolean alreadyReserved = member.getReservations().stream()
                .anyMatch(r -> r.getFitnessClass().getId().equals(fitnessClassId));
        if (alreadyReserved) {
            throw new IllegalStateException("Już posiadasz rezerwację na te zajęcia.");
        }

        Reservation reservation = new Reservation(member, fitnessClass);
        reservationRepository.save(reservation);
    }
}

================
File: src/main/resources/application.properties
================
# ===============================
# H2 DATABASE CONFIGURATION
# ===============================
# Enable H2 web console
spring.h2.console.enabled=true
# Set the path for the H2 console
spring.h2.console.path=/h2-console

server.port=8082

# ===============================
# DATASOURCE CONFIGURATION
# ===============================
# The URL of the database. H2 in-memory database named 'fitflowdb'.
spring.datasource.url=jdbc:h2:mem:fitflowdb
# The username for the database.
spring.datasource.username=sa
# The password for the database.
spring.datasource.password=
# The driver class name for the H2 database.
spring.datasource.driverClassName=org.h2.Driver

# ===============================
# JPA (JAVA PERSISTENCE API) CONFIGURATION
# ===============================
# Show SQL statements in the console for debugging purposes.
spring.jpa.show-sql=true
# Let Hibernate generate the database schema on startup. 'create-drop' is great for development.
spring.jpa.hibernate.ddl-auto=create-drop
# Specifies the H2 dialect for Hibernate.
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

================
File: src/main/resources/templates/class-schedule.html
================
<!DOCTYPE html>
<html lang="pl" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Grafik Zajęć - FitFlow</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>

<div th:replace="~{fragments :: navbar}"></div>

<div class="container mt-4">
    <h2>Grafik Zajęć</h2>
    <p>Przeglądaj dostępne zajęcia i zarezerwuj swoje miejsce.</p>

    <!-- Success Message -->
    <div th:if="${successMessage}" class="alert alert-success" role="alert" th:text="${successMessage}"></div>

    <!-- Error Message -->
    <div th:if="${errorMessage}" class="alert alert-danger" role="alert" th:text="${errorMessage}"></div>


    <div class="list-group">
        <div th:each="class : ${classes}" class="list-group-item list-group-item-action flex-column align-items-start mb-3 border rounded">
            <div class="d-flex w-100 justify-content-between">
                <h5 class="mb-1" th:text="${class.name}">Nazwa zajęć</h5>
                <small th:text="${#temporals.format(class.dateTime, 'dd.MM.yyyy HH:mm')}">Data</small>
            </div>
            <p class="mb-1" th:text="${class.description}">Opis zajęć.</p>
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <small th:text="'Trener: ' + ${class.trainer.firstName} + ' ' + ${class.trainer.lastName}">Imię trenera</small><br>
                    <small th:text="'Sala: ' + ${class.trainingRoom.name}">Sala</small>
                </div>
                <div>
                    <span th:text="'Wolne miejsca: ' + (${class.capacity} - ${class.numberOfReservations})" class="badge bg-primary rounded-pill me-3"></span>
                    <form th:action="@{/reservations}" method="post" class="d-inline">
                        <input type="hidden" name="classId" th:value="${class.id}" />
                        <input type="hidden" name="memberId" th:value="${memberId}" />
                        <button type="submit" class="btn btn-success" th:disabled="${(class.capacity - class.numberOfReservations) <= 0}">
                            Zarezerwuj
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

================
File: src/main/resources/templates/fragments.html
================
<!DOCTYPE html>
<html lang="pl" xmlns:th="http://www.thymeleaf.org">
<body>

<!-- Navigation Bar Fragment -->
<nav class="navbar navbar-expand-lg navbar-dark bg-dark" th:fragment="navbar">
    <div class="container-fluid">
        <a class="navbar-brand" th:href="@{/class-schedule}">FitFlow</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link" th:href="@{/class-schedule}">Grafik Zajęć</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" th:href="@{/my-reservations}">Moje Rezerwacje</a>
                </li>
            </ul>
            <ul class="navbar-nav">
                <li class="nav-item" th:if="${session.loggedInMemberId != null}">
                     <span class="navbar-text me-3" th:text="'Witaj, ' + ${session.loggedInMemberFirstName} + '!'">
                        Witaj, Użytkowniku!
                    </span>
                </li>
                <li class="nav-item" th:if="${session.loggedInMemberId != null}">
                    <a class="nav-link" th:href="@{/logout}">Wyloguj</a>
                </li>
                <li class="nav-item" th:unless="${session.loggedInMemberId != null}">
                    <a class="nav-link" th:href="@{/login}">Zaloguj</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

</body>
</html>

================
File: src/main/resources/templates/login.html
================
<!DOCTYPE html>
<html lang="pl" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Logowanie - FitFlow</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
            background-color: #f5f5f5;
        }
        .login-form {
            width: 100%;
            max-width: 400px;
            padding: 15px;
            margin: auto;
        }
    </style>
</head>
<body>
<main class="login-form">
    <form th:action="@{/login}" method="post">
        <h1 class="h3 mb-3 fw-normal text-center">FitFlow Logowanie</h1>
        <p class="text-center">Proszę się zalogować, używając adresu e-mail.</p>

        <div th:if="${error}" class="alert alert-danger" role="alert" th:text="${error}">
            Błędne dane.
        </div>

        <div class="form-floating mb-3">
            <input type="email" class="form-control" id="email" name="email" placeholder="name@example.com" required>
            <label for="email">Adres email</label>
        </div>
        <div class="form-floating mb-3">
            <input type="password" class="form-control" id="password" name="password" placeholder="Password" value="password" required>
            <label for="password">Hasło</label>
        </div>

        <button class="w-100 btn btn-lg btn-primary" type="submit">Zaloguj się</button>
    </form>
</main>
</body>
</html>

================
File: src/main/resources/templates/my-reservations.html
================
<!DOCTYPE html>
<html lang="pl" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Moje Rezerwacje - FitFlow</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>

<div th:replace="~{fragments :: navbar}"></div>

<div class="container mt-4">
    <h2>Moje Rezerwacje</h2>
    <p>Witaj, <span th:text="${member.firstName}"></span>! Oto lista Twoich nadchodzących rezerwacji.</p>

    <div th:if="${reservations.isEmpty()}" class="alert alert-info" role="alert">
        Nie masz jeszcze żadnych rezerwacji. Sprawdź nasz <a th:href="@{/class-schedule}" class="alert-link">grafik zajęć</a>!
    </div>

    <table class="table table-striped" th:if="${!reservations.isEmpty()}">
        <thead>
        <tr>
            <th scope="col">Nazwa Zajęć</th>
            <th scope="col">Data i Godzina</th>
            <th scope="col">Trener</th>
            <th scope="col">Sala</th>
            <th scope="col">Status</th>
        </tr>
        </thead>
        <tbody>
        <tr th:each="reservation : ${reservations}">
            <td th:text="${reservation.fitnessClass.name}">Joga</td>
            <td th:text="${#temporals.format(reservation.fitnessClass.dateTime, 'dd.MM.yyyy HH:mm')}">01.01.2025 10:00</td>
            <td th:text="${reservation.fitnessClass.trainer.firstName} + ' ' + ${reservation.fitnessClass.trainer.lastName}">Anna Nowak</td>
            <td th:text="${reservation.fitnessClass.trainingRoom.name}">Sala A</td>
            <td><span class="badge bg-success" th:text="${reservation.status}">Potwierdzona</span></td>
        </tr>
        </tbody>
    </table>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

================
File: src/test/java/pl/maksp/fitflow/model/MembershipTests.java
================
package pl.maksp.fitflow.model;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import pl.maksp.fitflow.repository.MembershipRepository;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
public class MembershipTests {
    
    private MembershipRepository membershipRepository;
    
    @Test
    void createMembership() {
        // Test creating a membership
        Membership membership = Membership.builder()
                .startDate(LocalDate.now())
                .endDate(LocalDate.now().plusMonths(1))
                .build();
                
        assertNotNull(membership);
        // ...existing code...
    }
    
    // ...existing code...
}
